# documentation: https://help.ente.io/self-hosting/installation/compose
# slogan: Ente Photos is a fully open source, End to End Encrypted alternative to Google Photos and Apple Photos.
# category: media
# tags: photos,gallery,backup,encryption,privacy,self-hosted,google-photos,alternative
# logo: svgs/ente-photos.svg
# port: 8080

services:
  museum:
    image: ghcr.io/ente-io/server:latest
    environment:
      - SERVICE_URL_MUSEUM_8080
      - ENTE_HTTP_USE_TLS=${ENTE_HTTP_USE_TLS:-false}

      - ENTE_APPS_PUBLIC_ALBUMS=${SERVICE_URL_WEB_3002}
      - ENTE_APPS_CAST=${SERVICE_URL_WEB_3004}
      - ENTE_APPS_ACCOUNTS=${SERVICE_URL_WEB_3001}

      - ENTE_DB_HOST=${ENTE_DB_HOST:-postgres}
      - ENTE_DB_PORT=${ENTE_DB_PORT:-5432}
      - ENTE_DB_NAME=${ENTE_DB_NAME:-ente_db}
      - ENTE_DB_USER=${SERVICE_USER_POSTGRES:-pguser}
      - ENTE_DB_PASSWORD=${SERVICE_PASSWORD_POSTGRES}

      - ENTE_KEY_ENCRYPTION=${SERVICE_REALBASE64_ENCRYPTION}
      - ENTE_KEY_HASH=${SERVICE_REALBASE64_64_HASH}

      - ENTE_JWT_SECRET=${SERVICE_REALBASE64_JWT}

      - ENTE_INTERNAL_ADMIN=${ENTE_INTERNAL_ADMIN:-1580559962386438}
      - ENTE_INTERNAL_DISABLE_REGISTRATION=${ENTE_INTERNAL_DISABLE_REGISTRATION:-false}
      
      # S3/MinIO configuration
      - S3_ARE_LOCAL_BUCKETS=true
      - S3_USE_PATH_STYLE_URLS=true
      - S3_B2_EU_CEN_KEY=${SERVICE_USER_MINIO}
      - S3_B2_EU_CEN_SECRET=${SERVICE_PASSWORD_MINIO}
      - S3_B2_EU_CEN_ENDPOINT=${SERVICE_URL_MINIO_3200}
      - S3_B2_EU_CEN_REGION=eu-central-2
      - S3_B2_EU_CEN_BUCKET=b2-eu-cen
    volumes:
      - museum-data:/data
      - museum-config:/config
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1:8080/ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  web:
    image: ghcr.io/ente-io/web
    environment:
      - SERVICE_URL_WEB_3000
      - ENTE_API_ORIGIN=${SERVICE_URL_MUSEUM}
      - ENTE_ALBUMS_ORIGIN=${SERVICE_URL_WEB_3002}

    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:3000"]
      interval: 5s
      timeout: 5s
      retries: 10
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${SERVICE_USER_POSTGRES}
      - POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES}
      - POSTGRES_DB=${POSTGRES_DB:-ente_db}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  minio:
    image: quay.io/minio/minio:latest
    environment:
      - SERVICE_URL_MINIO_9000
      - MINIO_ROOT_USER=${SERVICE_USER_MINIO}
      - MINIO_ROOT_PASSWORD=${SERVICE_PASSWORD_MINIO}
    command: server /data --address ":9000" --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 20s
      retries: 10

  minio-init:
    image: minio/mc:latest
    exclude_from_hc: true
    restart: no
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - MINIO_ROOT_USER=${SERVICE_USER_MINIO}
      - MINIO_ROOT_PASSWORD=${SERVICE_PASSWORD_MINIO}
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD};
      mc mb minio/b2-eu-cen --ignore-existing;
      mc mb minio/wasabi-eu-central-2-v3 --ignore-existing;
      mc mb minio/scw-eu-fr-v3 --ignore-existing;
      echo 'MinIO buckets created successfully';
      "
